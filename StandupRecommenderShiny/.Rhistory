# change duplicate entries of 2022-01-05 to 2022-01-06
dynasty_values <- dynasty_values_orig %>%
group_by(name, date) %>%
mutate(Count = row_number()) %>%
ungroup() %>%
mutate(date = as.Date(ifelse(Count > 1, date+days(1), date), origin = "1970-01-01")) %>%
select(-Count) %>%
arrange(date, desc(value))
dynasty_values
devy_values_orig <- read_csv('../../data/ktc_historical_devy_values.csv')
devy_values <- devy_values_orig %>%
group_by(name, date) %>%
mutate(Count = row_number()) %>%
ungroup() %>%
mutate(date = as.Date(ifelse(Count == 1 & date == "2022-01-11", date-days(1), date), origin = "1970-01-01")) %>%
select(-Count) %>%
arrange(date, desc(value))
devy_values
dynasty_full <- dynasty_values %>%
left_join(dynasty_attributes, by = c('name' = 'Name')) %>%
mutate(`Draft Overall Pick` = case_when(name == "D.J. Chark"~61,
name == "DK Metcalf"~64,
name == "Ronald Jones"~38,
name == "Chris Herndon"~107,
TRUE~`Draft Overall Pick`),
Position = case_when(name == "D.J. Chark"~"WR",
name == "DK Metcalf"~"WR",
name == "Robbie Anderson"~"WR",
name == "Ronald Jones"~"RB",
name == "Chris Herndon"~"TE",
TRUE~Position),
College = ifelse(name == "Melvin Gordon", "Wisconsin", College),
Experience = as.integer(Experience)
)
dynasty_full
# dynasty attributes
dynasty_attributes %>%
write_csv('../../data/dynasty_attributes.csv')
dynasty_attributes %>%
write_rds('../../data/dynasty_attributes.RDS')
# dynasty values
dynasty_values %>%
write_csv('../../data/ktc_historical_dynasty_values.csv')
dynasty_values %>%
write_rds('../../data/ktc_historical_dynasty_values.RDS')
# devy values
devy_values %>%
write_csv('../../data/ktc_historical_devy_values.csv')
devy_values %>%
write_rds('../../data/ktc_historical_devy_values.RDS')
# dynasty values with attributes (aka dynasty_full)
dynasty_full %>%
write_csv('../../data/dynasty_full.csv')
dynasty_full %>%
write_rds('../../data/dynasty_full.RDS')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
runApp('NSS/student/DS5/projects/dynasty_fantasy_football_ktc/notebooks/ktc_dashboard')
library(DBI)
library(RPostgres)
library(tidyverse)
library(plotly)
library(ggbeeswarm)
con <- dbConnect(Postgres(),                 # Use the postgres driver
dbname = 'prescribers',     # Name of the database we want to connect to
host = 'localhost',         # 'localhost' or eg. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432,
user = 'postgres',
password = rstudioapi::askForPassword("Database password"))
query = "
SELECT year, overdose_deaths
FROM overdose_deaths
INNER JOIN fips_county
USING (fipscounty)
WHERE state = 'TN'
"
res <- dbSendQuery(con, query)
od_by_year <- dbFetch(res)
dbClearResult(res)
od_by_year
query = "
SELECT year, county, population, overdose_deaths
FROM overdose_deaths
INNER JOIN fips_county
USING (fipscounty)
INNER JOIN population
USING (fipscounty)
WHERE state = 'TN'
"
res <- dbSendQuery(con, query)
od_by_year <- dbFetch(res)
dbClearResult(res)
od_by_year
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population)
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
arrange(overdose_deaths)
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
arrange(desc(overdose_deaths))
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
arrange(desc(year), desc(overdose_deaths))
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(sum(overdose_deaths))
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year, y = total_od)) +
geom_line()
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year, y = total_od)) +
geom_line() +
ylim(0,)
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year, y = total_od)) +
geom_line() +
ylim(0,1400)
od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year, y = total_od)) +
geom_line() +
ylim(0,1400) +
labs(title = 'Total Overdose Deaths in Tennessee by Year, 2015-2018',
x = 'Year',
y = 'Total Overdoses'
)
p <- od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year, y = total_od)) +
geom_line() +
ylim(0,1400) +
labs(title = 'Total Overdose Deaths in Tennessee by Year, 2015-2018',
x = 'Year',
y = 'Total Overdoses'
)
ggplotly(p)
p <- od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year, y = total_od)) +
geom_line() +
geom_point() +
ylim(0,1400) +
labs(title = 'Total Overdose Deaths in Tennessee by Year, 2015-2018',
x = 'Year',
y = 'Total Overdoses'
)
ggplotly(p)
p <- od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year,
y = total_od,
text = sprintf('Year: %s<br>Overdose Deaths: %s', year, total_od))) +
geom_line() +
geom_point() +
ylim(0,1400) +
labs(title = 'Total Overdose Deaths in Tennessee by Year, 2015-2018',
x = 'Year',
y = 'Total Overdoses'
)
ggplotly(p, tooltip = 'text')
p <- od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year,
y = total_od,
text = sprintf('Year: %s<br>Overdose Deaths: %s', year, total_od))) +
geom_point() +
geom_line() +
ylim(0,1400) +
labs(title = 'Total Overdose Deaths in Tennessee by Year, 2015-2018',
x = 'Year',
y = 'Total Overdoses'
)
ggplotly(p, tooltip = 'text')
p <- od_by_year %>%
mutate(od_per_capita = overdose_deaths/population) %>%
group_by(year) %>%
summarize(total_od = sum(overdose_deaths)) %>%
ggplot(aes(x = year,
y = total_od)) +
geom_point(aes(text = sprintf('Year: %s<br>Overdose Deaths: %s', year, total_od))) +
geom_line() +
ylim(0,1400) +
labs(title = 'Total Overdose Deaths in Tennessee by Year, 2015-2018',
x = 'Year',
y = 'Total Overdoses'
)
ggplotly(p, tooltip = 'text')
setwd("~/NSS/personal_repos/standup-comedy-NLP/StandupRecommenderShiny")
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
con <- dbConnect(RSQLite::SQLite(), "data/metacosims_recommender.sqlite")
dbListTables(con)
query <- "
SELECT *
FROM metacosims
"
res <- dbSendQuery(con, query)
overallfull <- dbFetch(res)
dbDisconnect(con)
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`cosine similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`cosine similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`cosine similarity` != 1)
)
top5 <- filteredoverall %>%
slice_max(`cosine similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`cosine similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`mean similarity` != 1)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
imgsrc <- recs %>%
slice(1) %>%
select(`image comparison`)
showList <- overallfull %>%
select(`description selection`) %>%
unique() %>%
arrange(`description selection`) %>%
pull()
randomInt <- sample(1:length(showList), 1)
randomShow <- showList[randomInt]
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`mean similarity` != 1)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recs
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`mean similarity` < 1)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recs
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`mean similarity` < 1.0)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recs
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(`fullTitle selection` == selectedShow) %>%
filter(`mean similarity` < 1.0)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recs
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(`fullTitle selection` == selectedShow) %>%
filter(`mean similarity` < 0.9)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recs
recommend <- function(newArtistsOnly = FALSE, selectedShow){
if(newArtistsOnly){
filteredoverall <- overallfull %>%
filter(
(`fullTitle selection` == selectedShow)
&
(`artist selection` != `artist comparison`)
)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
} else {
filteredoverall <- overallfull %>%
filter(`fullTitle selection` == selectedShow) %>%
filter(`mean similarity` < 0.98)
top5 <- filteredoverall %>%
slice_max(`mean similarity`, n = 5)
bottom1 <- filteredoverall %>%
slice_min(`mean similarity`, n = 1)
recs <- top5 %>% bind_rows(bottom1)
return(recs)
}
}
recs <- recommend(newArtistsOnly = FALSE, selectedShow = "Anthony Jeselnik: Thoughts and Prayers (2015)")
recs
runApp()
runApp()
runApp()
runApp()
> library(rsconnect)
> deployApp()
library(rsconnect)
deployApp()
